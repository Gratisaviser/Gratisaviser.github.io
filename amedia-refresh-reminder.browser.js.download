var amediaRefreshReminder_browser = {};

/**
 * A library simplifying use of adplogger
 * @module adploggerlib
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var noop = function noop() {};
var initialized = false;
var loggerWin = void 0;

/**
 * Side effect: Dispatch the event on the window
 *
 * @param {string} event The event name
 * @param {*=} data Data to attach to the event
 * @return {?Error} Error message, or null if successful
 * @private
 */
function sendEvent(adpEventName, data) {
    if (typeof adpEventName !== 'string') {
        return new TypeError('adpEventName must have type "string" (#sendEvent)');
    }

    if (!loggerWin) {
        loggerWin = window;
    }

    loggerWin.postMessage({
        adpEventName: adpEventName,
        data: data
    }, '*');

    return null;
}

/**
 * When adplogger is initialized in another window, e.g. you are an iframe and
 * apdlogger is initialized in your parent, this method can be used to inform
 * the library about which window adplogger resides in.
 *
 * Side effect: loggerWindow will be set as target for postMessage
 *
 * @example
 * // Parent of this iframe has initialized adplogger in its window --> set
 * // parent as loggerWindow
 * var error = adplogger.setLoggerWindow(window.parent);
 * if (error) {
 *   console.error('Argument must be valid window object:', error);
 * else {
 *   // Use as normal -->
 *   adplogger.add({ something: 42 });
 * }
 *
 * @param {Window} loggerWindow=window The window object where adplogger lives
 * @return {?TypeError} Error message if wrong argument type, else null
 */
function setLoggerWindow(loggerWindow) {
    if (typeof loggerWindow.postMessage !== 'function') {
        return new TypeError('loggerWindow must be a valid Window object');
    }

    loggerWin = loggerWindow;
    return null;
}

/**
 * Precondition: adplogger is or will be initialized
 * Side effect: Set 'initialized' variable (such that next call will be cheaper)
 *
 * @example
 * // We want to do something after adplogger has initialized successfully
 * adplogger.onAlive(function (error) {
 *   if (error) {
 *      console.error('Failed to get response from adplogger:', error);
 *      return;
 *   }
 *   // Do your thing -->
 * });
 *
 * @param {Function} next Function to call when adplogger is ready and responding
 */
function onAlive(next) {
    var error = null;

    if (initialized) {
        next(error);
        return;
    }

    window.addEventListener('message', function aliveListener(evt) {
        if (!evt.data || evt.data.adpEventName !== 'seshat-alive') {
            return;
        }
        window.removeEventListener('message', aliveListener);
        initialized = true;
        next(error);
    });
    error = sendEvent('seshat-ping');
}

/**
 * @param {Function} onSuccess Function to call when onAlive returns successfully
 * @param {Function=} onError Function to call when onAlive returns erroneously
 * @private
 */
function onAliveWrapper(onSuccess, onError) {
    onAlive(function (error) {
        if (error) {
            onError(error);
            return;
        }
        onSuccess();
    });
}

/**
 * Precondition: adplogger not previously initialized (anywhere in the webpage)
 * Side effect: The script has been inserted in the HTML, adplogger has initialized
 *
 * @example
 * // Will initialize ADP-logger, and always add metadata to tracking events
 * adplogger.initialize(url, {
 *      metadata: {
 *          page: 'main',
 *          browser: 'chrome',
 *      },
 * }, function (error) {
 *      if (error) {
 *          console.error('something bad happened while initializing:', error);
 *          return;
 *      }
 *      console.log('successfully initialized ADP-logger');
 * });
 *
 * @param {string} url The URL to retrieve adplogger script from
 * @param {Object=} data Any data to pass to adplogger on initialization (see https://github.com/amedia/adplogger for more info)
 * @param {Function=} next Function to call on return
 */
function initialize(url) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

    if (typeof url !== 'string' || url.length === 0) {
        next(new TypeError('url is required to be a string longer than 0 (#initialize)'));
        return;
    }

    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object' || data === null) {
        next(new TypeError('If provided, data must be a non-null object (#initialize'));
        return;
    }

    var script = document.createElement('script');
    var refNode = document.getElementsByTagName('script')[0];
    script.type = 'text/javascript';
    script.async = true;
    script.src = url;

    script.onload = function () {
        var error = sendEvent('seshat-initialize', data);
        if (error) {
            next(error);
            return;
        }
        onAlive(next);
    };
    refNode.parentNode.insertBefore(script, refNode);
}

/**
 * Precondition: adplogger is or will be initialized
 * Side effect: Add key-value pairs in 'data' to adplogger, adding duplicates
 *      to an array
 *
 * @example
 * // We want to add tracking data
 * adplogger.add({ theAnswer: 42 }, function (error) {
 *   if (error) {
 *      console.error('Failed to add tracking data:', error);
 *   }
 * });
 *
 * @param {Object.<string, (number|string|boolean)>} data key-value pairs to track
 * @param {Function=} next Function to call on return
 */
function add(data) {
    var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

    if (!initialized) {
        onAliveWrapper(add.bind(null, data, next), next);
        return;
    }

    if (data === null || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
        next(new TypeError('data is required to be a non-null object (#add)'));
        return;
    }

    var error = sendEvent('seshat-add', data);
    next(error);
}

/**
 * Precondition: adplogger is or will be initialized
 * Side effect: Set key-value pairs in 'data' in adplogger, overwriting duplicates
 *
 * @example
 * // We want to add or overwrite previous tracking data
 * adplogger.set({ theAnswer: 43 }, function (error) {
 *   if (error) {
 *      console.error('Failed to set tracking data:', error);
 *   }
 * });
 *
 * @param {Object.<string, (number|string|boolean)>} data key-value pairs to track
 * @param {Function=} next Function to call on return
 */
function set(data) {
    var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

    if (!initialized) {
        onAliveWrapper(set.bind(null, data, next), next);
        return;
    }

    if (data === null || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
        next(new TypeError('data is required to be a non-null object (#set)'));
        return;
    }

    var error = sendEvent('seshat-set', data);
    next(error);
}

/**
 * Precondition: adplogger is or will be initialized
 * Side effect: Add data, and send all tracking data to backend
 *
 * @example
 * // We want to add, set, and immediately send tracking data
 * adplogger.send({
 *   add: {
 *     theAnswer: 42
 *   },
 *   set: {
 *     theQuestion: 'unknown'
 *   }
 * }, function (error) {
 *   if (error) {
 *      console.error('Failed to send tracking data:', error);
 *      return;
 *   }
 *   // We know tracking data has been stored and can safely redirect (or whatever)
 * });
 *
 * @param {Object=} data
 * @param {Object.<string, (number|string|boolean)>=} data.set
 *      The data to set (same usage as [set]{@link #module_adploggerlib.set})
 * @param {Object.<string, (number|string|boolean)>=} data.add
 *      The data to add (same usage as [add]{@link #module_adploggerlib.add})
 * @param {Function=} next Function to call on return
 */
function send() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var next = arguments[1];

    var error = null;

    if (!initialized) {
        onAliveWrapper(send.bind(null, data, next), next);
        return;
    }

    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object' || data === null) {
        next(new TypeError('If provided, data must be a non-null object (#initialize'));
        return;
    }

    error = Object.keys(data).reduce(function (result, key) {
        if (!result && key !== 'set' && key !== 'add') {
            return new Error('Data should be categorized into either "set" or "add"\n                in #send');
        }
        return result;
    }, null);

    if (error) {
        next(error);
        return;
    }

    if (typeof next === 'function') {
        var sentListener = function sentListener(evt) {
            if (evt.data.adpEventName !== 'seshat-sent') {
                return;
            }
            window.removeEventListener('message', sentListener);
            next(error);
        };
        window.addEventListener('message', sentListener);
    }
    error = sendEvent('seshat-send', data);
}

/**
 * Used in single-page applications to track a virtual pageload event (i.e. call
 * this if the URL changes without an explicit pageload).
 *
 * Precondition: adplogger is or will be initialized
 * Side effect: Track virtual pageload in adplogger
 *
 * @example
 * // Our single-page application has presented a new page for the user
 * adplogger.pageview({
 *   something: 'dark',
 *   other: 'side'
 * }, function (error) {
 *   if (error) {
 *      console.error('Failed to create pageview:', error);
 *   }
 * });
 *
 * @param {Object.<string, (number|string|boolean)>} metadata
 *      The metadata to include on subsequent requests
 * @param {Function=} next The function call to return
 */
function pageview(metadata) {
    var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

    if (!initialized) {
        onAliveWrapper(pageview.bind(null, metadata, next), next);
        return;
    }

    var error = sendEvent('seshat-pageview', { metadata: metadata });
    next(error);
}

/**
 * Used on frontpages to log which teaser-test-variants are displayed to the user.
 *
 * @param {string} siteId The ID of the current frontpage as required by the test-processor
 * @param {...string[]} variantData 3-element array conaining `[teaserId, position, variant]`
 *                                  as strings
 * @param {Function=} next the last element can be a callback.
 *                         callback will be passed a parameter which is null (everything OK)
 *                         or a single error
 *                         or an array of nulls and/or errors where the position of errors
 *                         correlates to the order of variants
 *
 *
 * @example
 *
 * //setting siteId and adding variant data for multiple teasers
 * adplogger.variant('ABC123DEF456', ['5-41-1', 'spot3-2', 'A'],
 *                                   ['5-41-2', 'spot3-3', 'B'], (err) => {
 *   if (err) {
 *     console.error("could not add variants to log-stack")
 *     if (typeof err === 'array') {
 *        console.log("variant [5-41-1, spot3-2, A] resulted in ",err[0]);
 *        console.log("variant [5-41-2, spot3-3, B] resulted in ",err[1]);
 *     } else {
 *        console.log("the error was: ", err);
 *     }
 *   }
 * });
 *
 */
function variant() {
    // helper function for returning errors
    function err(msg, next) {
        var e = new Error(msg);next(e);return e;
    }

    var next = noop;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var n = args.length;
    if (typeof args[n - 1] === 'function') {
        next = args[n - 1]; // last arg is next
        args.pop(); // remove last element
        n = args.length;
    }
    if (n < 2) {
        return err('not enough arguments.', next);
    }

    // function to recursively "add" variants
    function recAdd(variants, testId, results) {
        if (variants.length > 0) {
            var jsonVariant = void 0;
            try {
                var v = variants.shift(); // take next variant from list of variants
                v.unshift(testId); // splice testId onto front of variant-array
                jsonVariant = JSON.stringify(v);
            } catch (e) {
                next(e);
                return;
            }
            add({ adp_variant_view: jsonVariant }, function (error) {
                // collect results in array
                results.push(error);
                recAdd(variants, testId, results);
            });
            // call callback with results array or null if all results are null
        } else if (results.every(function (e) {
            return e === null;
        })) {
            next(null);
        } else {
            next(results);
        }
    }

    var firstArg = args[0];
    if (typeof firstArg === 'string') {
        args.shift(); // remove first element. now args should only contain variants
        recAdd(args, firstArg, []);
    } else {
        return err('first argument must be siteId (string)', next);
    }
    return null;
}

/**
 * Precondition: adplogger is or will be initialized
 * Side effect: Send player and events for logging when adplogger is loaded
 *
 * Specifically for logging a Flow Player 8 video
 * @see https://flowplayer.com/help/player/player-api
 * 
 * @example
 * // We want to log a video
 * adplogger.logVideo(player, flowplayer.events, flowplayer.adEvents)
 *
 * @param {Object} player initialized flow player
 * @param {Object} events built-in flow player events
 * @param {Object} adEvents events from ad plugin. optional.
 * @param {Object} qulEvents events from qul plugin. optional.
 */
function logVideo(player, events, adEvents, qulEvents) {
    function logger(e) {
        var loggerFunction = e.detail;
        loggerFunction(player, events, adEvents, qulEvents);
        window.removeEventListener('video.adplogger.live', logger);
    }
    window.addEventListener('video.adplogger.live', logger);
    window.dispatchEvent(new CustomEvent('video.adp.client.ready'));
}

var bin = {
    sendEvent: sendEvent,
    setLoggerWindow: setLoggerWindow,
    onAlive: onAlive,
    initialize: initialize,
    add: add,
    set: set,
    send: send,
    pageview: pageview,
    variant: variant,
    logVideo: logVideo
};

const adplogger = bin;

const customElementName = 'amedia-refresh-reminder';
const twoDays = 2 * 60 * 60 * 24 * 1000;
const twoDaysAgo = Date.now() - twoDays;

class AmediaRefreshArticleReminder extends HTMLElement {
  connectedCallback() {
    if (parseInt(this.getAttribute('lastModified'), 10) < twoDaysAgo) {
      return;
    }
    this.log();
  }

  log() {
    this.documentLastModified = this.getAttribute('lastModified');
    this.articleId = this.getAttribute('articleId');
    this.message = this.getAttribute('message');

    const googleStorageURL = `https://storage.googleapis.com/amedia-content-updates/production/${
      this.articleId
    }.json?buster=${Date.now()}`;

    fetch(googleStorageURL)
      .then((res) => {
        if (!res.ok) {
          throw new Error(
            `Error getting article from storage: ${res.statusText}`
          );
        }
        return res.json();
      })
      .then((doc) => {
        if (doc && doc.lastModified) {
          const documentLastModifiedInt = parseInt(
            this.documentLastModified,
            10
          );
          const acpLastModifiedInt = parseInt(doc.lastModified, 10);
          if (documentLastModifiedInt < acpLastModifiedInt) {
            adplogger.set({
              a_content_cache: 'stale',
              a_content_cache_age: Date.now() - acpLastModifiedInt,
            });
          } else {
            adplogger.set({ a_content_cache: 'fresh' });
          }
        } else {
          adplogger.set({ a_content_cache: 'unknown' });
        }
      })
      .catch((e) => console.log(e));
  }
}

if (!customElements.get(customElementName)) {
  customElements.define(customElementName, AmediaRefreshArticleReminder);
}

export { amediaRefreshReminder_browser as default };
