import { UserDataRequest } from 'https://assets.acdn.no/pkg/@amedia/user/v0/user.js';

/**
 * This module is to allow "Datasak", an old app that are hard to update,
 * to continue using amedia-userdata-browser.
 * Once Datasak is updated this module should be deleted.
 * Method need to send event with this data https://github.com/amedia/datasak/blob/master/www/smartembed/common/DatasakUserData.js#L21
 */
window.addEventListener('userdata.data', e => {
  const payload = e.detail || {};
  const {
    method = '',
    resolve = () => {},
    reject = () => {}
  } = payload;
  if (method !== 'getUserData') {
    return;
  }
  if (payload.handled) {
    return;
  }
  payload.handled = true;
  new UserDataRequest().withAttributes(['extraData', 'privacyPreferences', 'uuid']).fetch().then(data => {
    const {
      extraData = {},
      privacyPreferences = {},
      uuid = ''
    } = data.attributes;
    const legacyData = {
      uuid,
      ...extraData,
      privacy_preferences: privacyPreferences
    };
    resolve(legacyData);
  }).catch(e => reject(e));
});
window.addEventListener('userdata.ready', () => window.dispatchEvent(new CustomEvent('userdata.live', {
  detail: '3.7.19'
})));
window.dispatchEvent(new CustomEvent('userdata.live', {
  detail: '3.7.19'
}));

function stringToHTML(html) {
  return new DOMParser().parseFromString(html, 'text/html').body.firstChild;
}
class AmediaUser extends HTMLElement {
  init() {
    this.disable = window.location.href.indexOf('disable_aid_menu=true') > -1;
    this.initialized = true;
    this.publication = this.getAttribute('publication');
    this.locale = this.getAttribute('locale') || '';
    this.mypage = this.getAttribute('mypage') || '';
    this.links = this.getAttribute('links');
    this.orderpage = this.getAttribute('orderpage') || '';
    this.subscriptionLink = this.getAttribute('subscription-link') || '';
    this.subscriptionText = this.getAttribute('subscription-text') || '';
    this.theme = this.getAttribute('theme');
    this.mockUser = this.getAttribute('mockuser');

    // Hack until pluss domain is removed
    if (window.location.hostname.includes('pluss.nettavisen.no')) {
      this.publication = 'pluss.nettavisen.no';
    }
    if (window.location.hostname.includes('www.nettavisen.no')) {
      this.publication = 'www.nettavisen.no';
    }
    if (this.mockUser) {
      this.render();
    } else {
      new UserDataRequest().withAttributes(['name', 'extraData']).subscribe(_ref => {
        var _attributes$extraData;
        let {
          attributes,
          state
        } = _ref;
        if (state.isLoggedIn !== true && state.isLoggedIn !== false) {
          if (state.emergencyMode && state.emergencyMode.includes('aid')) {
            this.renderEmergencyMode();
          }
          return;
        }
        this.isLoggedIn = state.isLoggedIn;
        this.user = {
          name: attributes.name || 'Innlogget',
          isEmployee: !!(attributes !== null && attributes !== void 0 && (_attributes$extraData = attributes.extraData) !== null && _attributes$extraData !== void 0 && _attributes$extraData.amedia_staff_user)
        };
        this.render();
      });
    }
  }
  connectedCallback() {
    if (!this.initialized) {
      this.init();
    }
  }
  render() {
    var _this$querySelector;
    (_this$querySelector = this.querySelector('.emergency-mode')) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.delete();
    if (this.disable) {
      this.setAttribute('style', 'display:none');
      return null;
    }
    let attr;
    if (this.isLoggedIn) {
      attr = "authenticated username=\"".concat(this.user.name, "\" isEmployee=\"").concat(this.user.isEmployee, "\"");
    } else if (this.mockUser) {
      attr = "authenticated username=\"".concat(this.mockUser, "\" isMockUser=\"true\"");
    } else {
      attr = "orderpage=\"".concat(this.orderpage, "\" publication=\"").concat(this.publication, "\" subscription-text=\"").concat(this.subscriptionText, "\" subscription-link=\"").concat(this.subscriptionLink, "\" links=\"").concat(this.links, "\"");
    }
    const usernameHTML = "<amedia-username ".concat(attr, " theme=\"").concat(this.theme, "\"></amedia-username>");
    const aidMenuHTML = "<amedia-aidmenu\n                class=\"".concat(this.theme, "\"\n                locale=\"").concat(this.locale, "\"\n                publication=\"").concat(this.publication, "\"\n                mypage=\"").concat(this.mypage, "\"\n                links=\"").concat(this.links, "\"\n                isLoggedIn=\"").concat(this.isLoggedIn, "\"\n            </amedia-aidmenu>");
    if (this.classList.contains('loaded')) {
      this.querySelector('amedia-username').replaceWith(stringToHTML(usernameHTML));
      this.querySelector('amedia-aidMenu').replaceWith(stringToHTML(aidMenuHTML));
    } else {
      this.insertAdjacentHTML('afterbegin', "".concat(usernameHTML).concat(aidMenuHTML));
      this.classList.add('loaded');
    }
    return this;
  }
  renderEmergencyMode() {
    if (!this.querySelector('.emergency-mode')) {
      this.insertAdjacentHTML('afterbegin', '<span class="emergency-mode">Tekniske problemer</span>');
    }
  }
}
if (customElements && customElements.define) {
  customElements.define('amedia-user', AmediaUser);
} else {
  document.registerElement('amedia-user', {
    prototype: AmediaUser.prototype
  });
}
