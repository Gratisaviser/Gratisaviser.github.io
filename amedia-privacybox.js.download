import { UserDataRequest, updateStorage } from 'https://assets.acdn.no/pkg/@amedia/user/v0/user.js';

const endsWidthPattern = /\.api\.no$/;
function aidUrl() {
  const {
    hostname
  } = window.location;
  if (endsWidthPattern.test(hostname)) {
    const urlParts = hostname.split('.');
    const env = urlParts[urlParts.length - 3];
    if (env === 'localhost') {
      return '//www.aid.no.localhost.api.no';
    }
    return "//www-".concat(env, ".aid.no");
  }
  return '//www.aid.no';
}
const data = {
  nb_NO: {
    authenticated: {
      title: '%navn%, her er en personvernpåminnelse',
      message: '%site% er en del av Amedia, og vi er ansvarlig for dine data. Vi bruker cookies og dine data til å forbedre og tilpasse tjenestene, tilbudene og annonsene du ser og bruker. Du kan når som helst endre dine innstillinger i Min aID.',
      moreBtn: 'Les mer',
      okBtn: 'OK – jeg forstår'
    },
    unauthenticated: {
      title: 'Personvern og cookies',
      message: '%site% er en del av Amedia, og vi er ansvarlig for dine data. Vi bruker cookies og dine data til å forbedre og tilpasse tjenestene, tilbudene og annonsene du ser og bruker.',
      moreBtn: 'Les mer',
      okBtn: 'OK – jeg forstår',
      loginCallToAction: 'Vil du lagre dine personverninnstillinger?',
      login: 'Logg inn med aID'
    }
  },
  nn_NO: {
    authenticated: {
      title: '%navn%, her er ei personvernpåminning',
      message: '%site% er ein del av Amedia, og vi er ansvarlege for dine data. Vi brukar cookies og dine data til å forbetre og tilpasse tenestene, tilboda og annonsane du ser og brukar. Du kan når som helst endre dine innstillingar i Min aID.',
      moreBtn: 'Les meir',
      okBtn: 'OK – Eg forstår'
    },
    unauthenticated: {
      title: 'Personvern og cookies',
      message: '%site% er ein del av Amedia, og vi er ansvarlege for dine data. Vi brukar cookies og dine data til å forbetre og tilpasse tenestene, tilboda og annonsane du ser og brukar.',
      moreBtn: 'Les meir',
      okBtn: 'OK – Eg forstår',
      loginCallToAction: 'Vil du lagre dine personverninnstillingar?',
      login: 'Logg inn med aID'
    }
  }
};
class AmediaPrivacy extends HTMLElement {
  init() {
    this.disable = window.location.href.indexOf('disable_privacy_box=true') > -1;
    const {
      userAgent
    } = window.navigator;
    if (this.getAttribute('in-review') !== null && userAgent.includes("pushvarslings-app/".concat(this.getAttribute('app-version')))) {
      this.parentNode.removeChild(this);
      return;
    }
    if (this.initialized) {
      return;
    }
    this.initialized = true;
    this.publication = this.getAttribute('publication');
    document.body.appendChild(this);
    new UserDataRequest().withAttributes(['name']).withStorage(['euucp']).fetch().then(_ref => {
      let {
        attributes,
        state,
        storage
      } = _ref;
      if (state.isLoggedIn) {
        this.initializeAuthenticated(attributes, storage.euucp);
      } else {
        this.initializeUnauthenticated();
      }
    }).catch(e => {
      console.error(e);
    });
  }
  initializeAuthenticated(attributes, euucp) {
    if (typeof euucp === 'undefined' || euucp.viewed && ("".concat(Date.now()) - euucp.viewed) / 1000 > 60 || euucp.button_clicked) {
      this.parentNode.removeChild(this);
      return;
    }
    this.username = attributes.name ? attributes.name.split(' ')[0] : 'Hei'; // Just in case we don't have a name.
    updateStorage({
      euucp: {
        ...euucp,
        viewed: "".concat(Date.now())
      }
    });
    window.addEventListener('privacy-box-button-clicked', () => {
      updateStorage({
        euucp: {
          ...euucp,
          button_clicked: "".concat(Date.now())
        }
      });
      this.parentNode.removeChild(this);
    });
    this.renderBox('authenticated');
  }
  initializeUnauthenticated() {
    if (!window.localStorage || !window.sessionStorage) {
      this.parentNode.removeChild(this);
      return;
    }
    window.localStorage.euucp = window.localStorage.euucp || 0;
    const euucp = parseInt(window.localStorage.euucp, 10);
    if (euucp >= 2) {
      this.parentNode.removeChild(this);
      return;
    }
    if (!window.sessionStorage.euucp) {
      window.localStorage.euucp = euucp + 1;
      window.sessionStorage.euucp = 'true';
    }
    window.addEventListener('privacy-box-button-clicked', () => {
      this.parentNode.removeChild(this);
      window.localStorage.euucp = 3;
    });
    this.renderBox('unauthenticated');
  }
  renderBox(state) {
    if (this.disable) {
      this.setAttribute('style', 'display:none');
    }
    const language = this.getAttribute('language');
    const site = this.getAttribute('site') || 'Denne nettsiden';
    const title = data[language][state].title.replace('%navn%', this.username);
    const message = data[language][state].message.replace('%site%', site);
    const {
      okBtn
    } = data[language][state];
    const more = data[language][state].moreBtn;
    const requestedURL = encodeURIComponent(window.location.href.split(/#/)[0]);
    const loginURL = "".concat(aidUrl(), "/aid/logg_inn/med_passord?requestedUrl=").concat(requestedURL, "&publication_domain=").concat(this.publication);
    const login = data[language][state].login ? "\n            <p class=\"login\">\n                ".concat(data[language][state].loginCallToAction, "\n                <a href=\"").concat(loginURL, "\">\n                    ").concat(data[language][state].login, "\n                </a>\n            </p>") : '';
    const html = "\n        <div>\n            <h2>".concat(title, "</h2>\n            <p>").concat(message, "</p>\n            ").concat(login, "\n            <div class=\"actionBar\">\n                <a class=\"lp_privacy_more\" href=\"//www.amedia.no/personvern/\">").concat(more, "</a>\n                <amedia-privacybox-button class=\"lp_privacy_ok\">").concat(okBtn, "</amedia-privacybox-button>\n            </div>\n            \n        </div>");
    this.insertAdjacentHTML('afterbegin', html);
    this.classList.add('active');
  }
  connectedCallback() {
    this.init();
  }
  attachedCallback() {
    this.init();
  }
}
if (customElements && customElements.define) {
  customElements.define('amedia-privacybox', AmediaPrivacy);
} else {
  document.registerElement('amedia-privacybox', {
    prototype: AmediaPrivacy.prototype
  });
}
